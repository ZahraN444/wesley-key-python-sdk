# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import os
import unittest
from tests.http_response_catcher import HttpResponseCatcher
from swaggerpetstore.configuration import Configuration, Environment
from swaggerpetstore.swaggerpetstore_client import SwaggerpetstoreClient
from swaggerpetstore.http.auth.api_key import ApiKeyCredentials
from swaggerpetstore.http.auth.http_basic import HttpBasicCredentials
from swaggerpetstore.http.auth.petstore_auth import PetstoreAuthCredentials


class ControllerTestBase(unittest.TestCase):

    """All test classes inherit from this base class. It abstracts out
    common functionality and configuration variables set up."""

    client = None
    config = None

    @classmethod
    def setUpClass(cls):
        """Class method called once before running tests in a test class."""
        cls.request_timeout = 30
        cls.assert_precision = 0.01
        cls.config = ControllerTestBase.create_configuration()
        cls.client = SwaggerpetstoreClient(config=cls.config)

        petstore_auth_token = cls.client.petstore_auth.fetch_token()
        petstore_auth_credentials = cls.config.petstore_auth_credentials\
            .clone_with(o_auth_token=petstore_auth_token)
        cls.config = cls.config.clone_with(petstore_auth_credentials=petstore_auth_credentials)

        cls.client = SwaggerpetstoreClient(config=cls.config)

    @staticmethod
    def create_configuration():
        environment = os.getenv('SWAGGERPETSTORE_ENVIRONMENT')
        test_header = os.getenv('SWAGGERPETSTORE_TEST_HEADER')
        api_key = os.getenv('SWAGGERPETSTORE_API_KEY')
        username = os.getenv('SWAGGERPETSTORE_USERNAME', 'test')
        passwprd = os.getenv('SWAGGERPETSTORE_PASSWPRD', 'testPassword')
        o_auth_client_id = os.getenv('SWAGGERPETSTORE_O_AUTH_CLIENT_ID')
        o_auth_redirect_uri = os.getenv('SWAGGERPETSTORE_O_AUTH_REDIRECT_URI')

        if environment is not None:
            environment = Environment[environment.upper()]
        api_key_credentials=None
        if api_key is not None:
            api_key_credentials=ApiKeyCredentials(api_key=api_key)

        http_basic_credentials=None
        if (username is not None
                and passwprd is not None):
            http_basic_credentials=HttpBasicCredentials(username=username,
                                                        passwprd=passwprd)

        petstore_auth_credentials=None
        if (o_auth_client_id is not None
                and o_auth_redirect_uri is not None):
            petstore_auth_credentials=PetstoreAuthCredentials(
                o_auth_client_id=o_auth_client_id,
                o_auth_redirect_uri=o_auth_redirect_uri)


        config = Configuration(http_call_back=HttpResponseCatcher())
        return config.clone_with(
            api_key_credentials=api_key_credentials,
            http_basic_credentials=http_basic_credentials,
            petstore_auth_credentials=petstore_auth_credentials,
            environment=environment, test_header=test_header)

